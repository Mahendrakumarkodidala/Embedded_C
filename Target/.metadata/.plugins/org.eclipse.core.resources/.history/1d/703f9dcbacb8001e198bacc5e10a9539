/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
	uint32_t *pPDModeReg = (uint32_t*)0x40020C00;
	uint32_t *pPAModeReg = (uint32_t*)0x40020000;
	uint32_t *pPAInReg = (uint32_t*)0x40020010;
	uint32_t *pPDOutputReg = (uint32_t*)0x40020C14;

	//1. Enabling the Clock for GPIOD, GPIOA AHB1ENR
	*pClkCtrlReg = *pClkCtrlReg | (1 << 3); //GPIOD
	*pClkCtrlReg = *pClkCtrlReg | (1 << 0); //GPIOA



	//2. Changing the mode of PD12 pin to output (25,24 bit to 0,1)
	// a. Clearing the 24th bit and 25th bit
	*pPDModeReg = *pPDModeReg & ~(3 << 24);
	// b. Setting the 24th bit as 1
	*pPDModeReg = *pPDModeReg | (1 << 24);


	//3. Changing the mode of PA0 pin to Input (GPIOA mode register)
	// a. Clearing the 0th bit and 1th bit
	*pPAModeReg = *pPAModeReg & ~(3 << 0);

	//4. Read the pin status of the pin PA0
	uint8_t pinstatus=(uint8_tPAInReg & 0x1);  //zero out all other bits expect 0

	if()

	//4. Setting the 12th bit of output data register as HIGH
		*pPDOutputReg = *pPDOutputReg | (1 << 12);




	    /* Loop forever */
		for(;;);
	}
